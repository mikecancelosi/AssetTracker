using DataAccessLayer;
using DataAccessLayer.Services;
using DomainModel;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Quipu.CodeGenerator
{
    public class PermissionsBuilder
    {
        private const string FILENAME = "Permission.cs";
        private static string ParentDirectory => Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..\\..\\..\\..\\"));
        private static string DirectoryLocation => ParentDirectory + "DomainModel";
        private static string FileLocation => Path.Combine(DirectoryLocation, FILENAME);

        public static void BuildFile(IUnitOfWork uow)
        {
            string output = "";

            output += "/********************************************************************************\n" +
                      "NOTE: THIS IS AUTO GENERATED CONTENT! ANY CHANGES WILL BE DELETED ON NEXT BUILD \n " +
                      "*********************************************************************************/\n";

            output += "using System;\n" +
                      "using System.Text;\n" +
                      "using System.ComponentModel;\n\n";

            output += "namespace DomainModel \n" +
                      "{\n";

            output += "\t#region AutoGeneratedContent\n";


            output += "\tpublic enum Permission \n" +
                      "\t{ \n";

            IRepository<SecPermission> permissionRepo = uow.GetRepository<SecPermission>();

            List<SecPermission> permissionList = (from p in permissionRepo.Get()
                                                  select p).ToList();

            foreach (SecPermission permission in permissionList)
            {
                string cleanName = CleanEnumName(permission.Name);
                output += $"\t\t[Description(\"{permission.Name}\")]\n";
                output += $"\t\t{cleanName} = {permission.ID},\n\n";
            }



            output += "\t}\n" +
                 "\t#endregion\n" +
                      "}\n";


            File.WriteAllText(FileLocation, output);
        }

        private static string CleanEnumName(string input)
        {
            return String.Concat(input.Where(c => !Char.IsWhiteSpace(c) && 
                                                  !Char.IsPunctuation(c)));
        }
    }
}
